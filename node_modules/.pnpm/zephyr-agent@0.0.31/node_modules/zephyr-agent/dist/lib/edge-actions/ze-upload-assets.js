"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.zeUploadAssets = void 0;
const get_application_configuration_1 = require("../edge-requests/get-application-configuration");
const upload_file_1 = require("../http/upload-file");
const picocolor_1 = require("../logging/picocolor");
const logging_1 = require("../logging");
async function zeUploadAssets(zephyr_engine, { missingAssets, assetsMap }) {
    const count = Object.keys(assetsMap).length;
    const logger = await zephyr_engine.logger;
    const application_uid = zephyr_engine.application_uid;
    if (missingAssets.length === 0) {
        logger({
            level: 'info',
            action: 'snapshot:assets:upload:empty',
            message: `No assets to upload, ${(0, picocolor_1.white)('skipping')}...`,
        });
        return true;
    }
    const start = Date.now();
    let totalSize = 0;
    const appConfig = await (0, get_application_configuration_1.getApplicationConfiguration)({
        application_uid,
    });
    await Promise.all(missingAssets.map(upload_missing_asset));
    logger({
        level: 'info',
        action: 'snapshot:assets:upload:done',
        message: (0, picocolor_1.white)(`(${(0, picocolor_1.whiteBright)(missingAssets.length.toString())}/${(0, picocolor_1.white)(count.toString())} assets uploaded in ${(0, picocolor_1.whiteBright)((Date.now() - start).toString())}ms, ${(0, picocolor_1.whiteBright)(totalSize.toFixed(2))}kb)`),
    });
    return true;
    async function upload_missing_asset(asset) {
        var _a;
        const start = Date.now();
        const assetWithBuffer = assetsMap[asset.hash];
        const assetSize = ((_a = assetWithBuffer === null || assetWithBuffer === void 0 ? void 0 : assetWithBuffer.buffer) === null || _a === void 0 ? void 0 : _a.length) / 1024;
        await (0, upload_file_1.uploadFile)({
            hash: asset.hash,
            asset: assetWithBuffer,
        }, appConfig);
        const fileUploaded = Date.now() - start;
        totalSize += assetSize;
        (0, logging_1.ze_log)(`file ${asset.path} uploaded in ${fileUploaded}ms (${assetSize.toFixed(2)}kb)`);
    }
}
exports.zeUploadAssets = zeUploadAssets;
//# sourceMappingURL=ze-upload-assets.js.map