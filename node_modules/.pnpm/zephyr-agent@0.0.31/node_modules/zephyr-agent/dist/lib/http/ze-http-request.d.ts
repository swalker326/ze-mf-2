/// <reference types="node" />
/// <reference types="node" />
import type { ClientRequestArgs } from 'node:http';
/** Http request wrapper that returns a tuple with the response data or an error. */
export type HttpResponse<T> = [ok: true, error: null, data: T] | [ok: false, error: Error];
export type UrlString = string | URL | {
    path: string;
    base?: string;
    query: Record<string, string | number | boolean>;
};
/** Starts a new http request */
export declare class ZeHttpRequest<T = void> implements PromiseLike<HttpResponse<T>> {
    #private;
    /** Creates a new http request. */
    static from<T = void>(urlStr: UrlString, options?: ClientRequestArgs, data?: string | Buffer): ZeHttpRequest<T>;
    then: <TResult1 = HttpResponse<T>, TResult2 = never>(onfulfilled?: ((value: HttpResponse<T>) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined) => Promise<TResult1 | TResult2>;
    /** Transforms `Promise<HttpResponse<T>>` into `Promise<T>` */
    unwrap(): Promise<T>;
}
