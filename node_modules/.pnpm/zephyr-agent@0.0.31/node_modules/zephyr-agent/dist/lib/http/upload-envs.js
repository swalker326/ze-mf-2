"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadEnvs = void 0;
const get_application_configuration_1 = require("../edge-requests/get-application-configuration");
const logging_1 = require("../logging");
const ze_http_request_1 = require("./ze-http-request");
const errors_1 = require("../errors");
async function uploadEnvs({ body, application_uid, logEvent, }) {
    (0, logging_1.ze_log)(`Uploading envs to Zephyr, for ${application_uid}`);
    const { EDGE_URL, jwt } = await (0, get_application_configuration_1.getApplicationConfiguration)({
        application_uid,
    });
    const json = JSON.stringify(body);
    const options = {
        method: 'POST',
        headers: {
            'Content-Length': Buffer.byteLength(json),
            'Content-Type': 'application/json; charset=utf-8',
            can_write_jwt: jwt,
        },
    };
    const [ok, cause, data] = await ze_http_request_1.ZeHttpRequest.from({
        path: '/upload',
        base: EDGE_URL,
        query: { type: 'envs' },
    }, options, JSON.stringify(body));
    if (!ok || !data) {
        logEvent({
            level: 'error',
            action: 'deploy:edge:failed',
            message: 'failed deploying local build to edge',
        });
        throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_FAILED_UPLOAD, { type: 'envs', cause: cause });
    }
}
exports.uploadEnvs = uploadEnvs;
//# sourceMappingURL=upload-envs.js.map