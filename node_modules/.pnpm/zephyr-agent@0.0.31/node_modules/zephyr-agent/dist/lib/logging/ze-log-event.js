"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.logFn = void 0;
const zephyr_edge_contract_1 = require("zephyr-edge-contract");
const get_application_configuration_1 = require("../edge-requests/get-application-configuration");
const debug_enabled_1 = require("./debug-enabled");
const index_1 = require("./index");
const debug_1 = require("./debug");
const token_1 = require("../node-persist/token");
const ze_http_request_1 = require("../http/ze-http-request");
const logFn = (level, msg) => {
    if (debug_enabled_1.is_debug_enabled) {
        (0, index_1.ze_log)(msg);
        return;
    }
    const str = String(msg);
    const padded = str
        .split('\n')
        .map((m) => `${toLevelPrefix(level)}  ${m.trimEnd()}`)
        .join('\n');
    switch (level) {
        case 'warn':
            console.warn(padded);
            break;
        case 'debug':
            console.debug(padded);
            break;
        case 'error':
            console.error(padded);
            break;
        default:
            console.log(padded);
    }
};
exports.logFn = logFn;
function toLevelPrefix(level) {
    switch (level) {
        case 'warn':
            return debug_1.brightYellowBgName;
        case 'debug':
            return debug_1.brightGreenBgName;
        case 'error':
            return debug_1.brightRedBgName;
        default:
            return debug_1.brightBlueBgName;
    }
}
function logger(props) {
    const { application_uid, buildId, git } = props;
    // lazy loads the application configuration and token
    const loadLogData = (0, zephyr_edge_contract_1.PromiseLazyLoad)(() => {
        return Promise.all([(0, get_application_configuration_1.getApplicationConfiguration)({ application_uid }), (0, token_1.getToken)()]);
    });
    const url = new URL(zephyr_edge_contract_1.ze_api_gateway.logs, (0, zephyr_edge_contract_1.ZE_API_ENDPOINT)());
    return function logEvent(...logs) {
        // Prints logs to the console as fast as possible
        for (const log of logs) {
            if (!log.level && !log.action) {
                throw new Error('log level and action type must be provided');
            }
            (0, exports.logFn)(log.level, log.message);
        }
        // Then attempt to upload logs,
        loadLogData()
            .then(([config, token]) => ze_http_request_1.ZeHttpRequest.from(url, {
            method: 'POST',
            headers: {
                Authorization: `Bearer ${token}`,
                'Content-Type': 'application/json',
            },
        }, JSON.stringify(logs
            // some logs are empty to give newline effect in terminal
            .filter((l) => l.message.length && !l.ignore)
            .map((log) => ({
            application_uid: application_uid,
            userId: config.user_uuid,
            username: config.username,
            zeBuildId: buildId,
            logLevel: log.level,
            actionType: log.action,
            git: git,
            message: (0, zephyr_edge_contract_1.stripAnsi)(log.message.trim()),
            createdAt: Date.now(),
        })))).unwrap())
            // This is ok to fail silently
            .catch(() => void 0);
    };
}
exports.logger = logger;
//# sourceMappingURL=ze-log-event.js.map