"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ze_error = exports.ze_log = exports.brightRedBgName = exports.brightGreenBgName = exports.brightYellowBgName = exports.brightBlueBgName = exports.dimmedName = void 0;
// light weight functions for decorated console.error + able to toggle different parts of whole module's logging result
const debug_1 = require("debug");
const picocolor_1 = require("./picocolor");
const debug_enabled_1 = require("./debug-enabled");
const error_formatted_message_1 = require("./error-formatted-message");
//TODO: this should be traced and logged into new relic
//TODO: print different colors to it + Capitalize maybe?
const name = ' ZEPHYR ';
exports.dimmedName = (0, picocolor_1.dim)(name);
exports.brightBlueBgName = (0, picocolor_1.bold)((0, picocolor_1.bgCyanBright)((0, picocolor_1.black)(name)));
exports.brightYellowBgName = (0, picocolor_1.bold)((0, picocolor_1.bgYellowBright)((0, picocolor_1.black)(name)));
exports.brightGreenBgName = (0, picocolor_1.bold)((0, picocolor_1.bgGreenBright)((0, picocolor_1.black)(name)));
exports.brightRedBgName = (0, picocolor_1.bold)((0, picocolor_1.bgRedBright)((0, picocolor_1.black)(name)));
function print_error_with_docs(errMsg, ...args) {
    errMsg
        ? console.log(`${exports.brightRedBgName} ${(0, error_formatted_message_1.err)(errMsg)} ${args} \n`)
        : console.log(exports.brightRedBgName, (0, picocolor_1.redBright)('Unknown error'), args);
}
exports.ze_log = (0, debug_1.debug)('zephyr:log');
// If debug mode is not enabled just print whatever console output is
// If debug mode is enabled print the error from our end
/**
 * `ze_error` is used widely to debug our local build and deployment. You can turn on
 * debug mode or having it work normally to attached documentation with our error codes in
 * [errors](./error-types.ts). We have added unknown class to the error object. If this is
 * an error we haven't defined yet, you will need to do
 *
 * @deprecated
 * @example
 *   ```ts
 *   ze_error('ERR_UNKNOWN', `Error creating dist folder: ${(error as Error).message}`);
 *   ```
 *   to specify this is an undefined error at the front.
 */
exports.ze_error = debug_enabled_1.is_debug_enabled
    ? (0, debug_1.debug)('zephyr:error')
    : print_error_with_docs;
//# sourceMappingURL=debug.js.map