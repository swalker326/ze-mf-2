"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.err = exports.errMsg = exports.errCode = exports.docsPrefix = void 0;
// ! If anyone is adding new errors to this file please make sure the description and debugging for users are sync with documentation's error page
const picocolor_1 = require("./picocolor");
const error_codes_messages_1 = require("./error-codes-messages");
exports.docsPrefix = 'https://docs.zephyr-cloud.io/errors';
function errCode(err) {
    const id = error_codes_messages_1.Errors[err].id;
    const prefix = error_codes_messages_1.ErrorCategories[error_codes_messages_1.Errors[err].kind];
    // we have less categories and more errors, so make sense to be ZEPPIII
    // where ZE is a constant, PP is the category, and I is the error id
    const paddedId = id.toString().padStart(3, '0');
    const paddedPrefix = prefix.toString().padStart(2, '0');
    return `ZE${paddedPrefix}${paddedId}`;
}
exports.errCode = errCode;
function errMsg(err) {
    return error_codes_messages_1.Errors[err].message;
}
exports.errMsg = errMsg;
function err(err) {
    const id = error_codes_messages_1.Errors[err].id;
    const prefix = error_codes_messages_1.ErrorCategories[error_codes_messages_1.Errors[err].kind];
    // we have less categories and more errors, so make sense to be ZEPPIII
    // where ZE is a constant, PP is the category, and I is the error id
    const paddedId = id.toString().padStart(3, '0');
    const paddedPrefix = prefix.toString().padStart(2, '0');
    const errorCode = `ZE${paddedPrefix}${paddedId}`;
    const errorMsg = error_codes_messages_1.Errors[err].message;
    const errorDoc = `See potential workaround and how to debug this error in our documentation ${exports.docsPrefix}/${errorCode.toLowerCase()}`;
    const fullMsg = (0, picocolor_1.redBright)(`Error code: ${errorCode}. ${errorMsg} \n ${errorDoc}`);
    return fullMsg;
}
exports.err = err;
//# sourceMappingURL=error-formatted-message.js.map