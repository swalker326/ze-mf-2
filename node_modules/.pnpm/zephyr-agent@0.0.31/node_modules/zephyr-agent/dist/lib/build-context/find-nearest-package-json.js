"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.find_nearest_package_json = void 0;
const promises_1 = require("node:fs/promises");
const node_fs_1 = require("node:fs");
const node_path_1 = require("node:path");
const promises_2 = require("fs/promises");
const package_json_not_found_error_1 = require("../errors/package-json-not-found-error");
const max_retry = 30;
async function find_nearest_package_json(startPath) {
    if (!startPath) {
        throw new package_json_not_found_error_1.PackageJsonNotFoundError(`${startPath}`);
    }
    let retry = 0;
    let dir = startPath;
    do {
        retry++;
        if (retry > max_retry) {
            throw new package_json_not_found_error_1.PackageJsonNotFoundError(`${startPath} after ${max_retry} retries`);
        }
        const packageJsonPath = (0, node_path_1.join)(dir, 'package.json');
        try {
            (0, node_fs_1.accessSync)(packageJsonPath, promises_2.constants.F_OK);
            return {
                path: packageJsonPath,
                json: await (0, promises_1.readFile)(packageJsonPath, 'utf8'),
            };
        }
        catch (e) {
            // do nothing
        }
        const parentDir = (0, node_path_1.resolve)(dir, '..');
        if (parentDir === dir) {
            throw new package_json_not_found_error_1.PackageJsonNotFoundError(`${startPath}`);
        }
        dir = parentDir;
    } while (startPath !== dir);
    throw new package_json_not_found_error_1.PackageJsonNotFoundError(`${startPath}`);
}
exports.find_nearest_package_json = find_nearest_package_json;
//# sourceMappingURL=find-nearest-package-json.js.map