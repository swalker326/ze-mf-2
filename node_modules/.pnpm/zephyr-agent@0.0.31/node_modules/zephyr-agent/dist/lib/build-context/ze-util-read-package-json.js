"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageJson = void 0;
const tslib_1 = require("tslib");
const node_fs_1 = tslib_1.__importDefault(require("node:fs"));
const node_path_1 = require("node:path");
const zephyr_edge_contract_1 = require("zephyr-edge-contract");
const find_nearest_package_json_1 = require("./find-nearest-package-json");
const fs_cache_for_package_json_1 = require("./fs-cache-for-package-json");
const logging_1 = require("../logging");
const package_json_not_found_error_1 = require("../errors/package-json-not-found-error");
const package_not_a_json_error_1 = require("../errors/package-not-a-json-error");
const package_json_not_valid_error_1 = require("../errors/package-json-not-valid-error");
async function getPackageJson(context) {
    let startingPath = context || process.cwd();
    if (node_fs_1.default.statSync(startingPath).isFile()) {
        startingPath = (0, node_path_1.resolve)(startingPath, '..');
    }
    const cached = await (0, fs_cache_for_package_json_1.getPackageJsonCache)(startingPath);
    if (cached)
        return cached;
    const nearest_package_json = await (0, find_nearest_package_json_1.find_nearest_package_json)(startingPath);
    if (!nearest_package_json) {
        throw new package_json_not_found_error_1.PackageJsonNotFoundError(context);
    }
    const { json, path } = nearest_package_json;
    const parsed_package_json = (0, zephyr_edge_contract_1.safe_json_parse)(json);
    if (!parsed_package_json) {
        throw new package_not_a_json_error_1.PackageNotAJsonError(path);
    }
    if (!parsed_package_json.name || !parsed_package_json.version) {
        throw new package_json_not_valid_error_1.PackageJsonNotValidError(path);
    }
    (0, logging_1.ze_log)('package json found', parsed_package_json);
    await (0, fs_cache_for_package_json_1.setPackageJsonCache)(startingPath, parsed_package_json);
    return parsed_package_json;
}
exports.getPackageJson = getPackageJson;
//# sourceMappingURL=ze-util-read-package-json.js.map