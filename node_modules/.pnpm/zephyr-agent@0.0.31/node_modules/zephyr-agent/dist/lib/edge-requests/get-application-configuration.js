"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getApplicationConfiguration = void 0;
const zephyr_edge_contract_1 = require("zephyr-edge-contract");
const login_1 = require("../auth/login");
const errors_1 = require("../errors");
const token_1 = require("../node-persist/token");
const ze_http_request_1 = require("../http/ze-http-request");
const logging_1 = require("../logging");
const application_configuration_1 = require("../node-persist/application-configuration");
async function loadApplicationConfiguration({ application_uid, }) {
    if (!application_uid) {
        throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_MISSING_APPLICATION_UID);
    }
    const token = await (0, token_1.getToken)();
    const application_config_url = new URL(`${zephyr_edge_contract_1.ze_api_gateway.application_config}/${application_uid}`, (0, zephyr_edge_contract_1.ZE_API_ENDPOINT)());
    const [ok, cause, data] = await ze_http_request_1.ZeHttpRequest.from(application_config_url, {
        headers: { Authorization: `Bearer ${token}` },
    });
    if (!ok || !(data === null || data === void 0 ? void 0 : data.value)) {
        throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_LOAD_APP_CONFIG, {
            application_uid,
            cause,
            data: {
                url: application_config_url.toString(),
            },
        });
    }
    return Object.assign(Object.assign({}, data.value), { fetched_at: Date.now() });
}
/**
 * Gather all calls until the first returns result:
 *
 * - No parallel requests to api
 * - Almost all actual data
 *
 * Note: not the best solution, but works until we use the same application_uid during
 * execution
 */
async function getApplicationConfiguration({ application_uid, }) {
    (0, logging_1.ze_log)('Getting application configuration from node-persist');
    const promise = addToQueue();
    if (callsQueue.length === 1) {
        const storedAppConfig = await (0, application_configuration_1.getAppConfig)(application_uid);
        if (!storedAppConfig ||
            (storedAppConfig &&
                (!(0, login_1.isTokenStillValid)(storedAppConfig.jwt) ||
                    !(storedAppConfig === null || storedAppConfig === void 0 ? void 0 : storedAppConfig.fetched_at) ||
                    Date.now() - storedAppConfig.fetched_at > 60 * 1000))) {
            (0, logging_1.ze_log)('Loading Application Configuration from API...');
            await loadApplicationConfiguration({ application_uid })
                .then(async (loadedAppConfig) => {
                (0, logging_1.ze_log)('Saving Application Configuration to node-persist...');
                await (0, application_configuration_1.saveAppConfig)(application_uid, loadedAppConfig);
                return loadedAppConfig;
            })
                .then((result) => handleQueue(result))
                .catch((error) => handleQueue(undefined, error));
        }
        else {
            handleQueue(storedAppConfig);
        }
    }
    return promise;
}
exports.getApplicationConfiguration = getApplicationConfiguration;
const callsQueue = [];
function addToQueue() {
    let resolve;
    let reject;
    const callback = (value, error) => {
        if (value) {
            resolve(value);
        }
        reject(error);
    };
    callsQueue.push(callback);
    return new Promise((_resolve, _reject) => {
        resolve = _resolve;
        reject = _reject;
    });
}
function handleQueue(result, error) {
    do {
        const callback = callsQueue.shift();
        if (callback) {
            callback(result, error);
        }
    } while (callsQueue.length);
}
//# sourceMappingURL=get-application-configuration.js.map