"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSnapshot = void 0;
const zephyr_edge_contract_1 = require("zephyr-edge-contract");
async function createSnapshot(zephyr_engine, { mfConfig, assets }) {
    const buildId = await zephyr_engine.build_id;
    if (!buildId) {
        await zephyr_engine.build_id;
        throw new Error(`Can't createSnapshot() without buildId`);
    }
    const options = {
        git_branch: zephyr_engine.gitProperties.git.branch,
        buildId,
        username: (await zephyr_engine.application_configuration).username,
        email: (await zephyr_engine.application_configuration).email,
        applicationProperties: zephyr_engine.applicationProperties,
        edge_url: (await zephyr_engine.application_configuration).EDGE_URL,
        gitProperties: zephyr_engine.gitProperties,
        mfConfig: mfConfig,
    };
    const version_postfix = zephyr_engine.env.isCI
        ? `${options.git_branch}.${options.buildId}`
        : `${options.username}.${options.buildId}`;
    return {
        // ZeApplicationProperties
        application_uid: (0, zephyr_edge_contract_1.createApplicationUid)(options.applicationProperties),
        version: `${options.applicationProperties.version}-${version_postfix}`,
        // ZeApplicationProperties + buildId + ZeApplicationProperties.username
        snapshot_id: (0, zephyr_edge_contract_1.flatCreateSnapshotId)(Object.assign({}, options.applicationProperties, {
            buildId: options.buildId,
            username: options.username,
        })),
        domain: options.edge_url,
        uid: {
            build: options.buildId,
            app_name: options.applicationProperties.name,
            repo: options.applicationProperties.project,
            org: options.applicationProperties.org,
        },
        git: options.gitProperties.git,
        creator: {
            name: options.username,
            email: options.email,
        },
        createdAt: Date.now(),
        mfConfig: options.mfConfig,
        assets: Object.keys(assets).reduce((memo, hash) => {
            const asset = assets[hash];
            const { path, extname, size } = asset;
            memo[asset.path] = { path, extname, hash: asset.hash, size };
            return memo;
        }, {}),
    };
}
exports.createSnapshot = createSnapshot;
//# sourceMappingURL=ze-build-snapshot.js.map