import { Snapshot, type ZeBuildAsset, ZeBuildAssetsMap, type ZephyrBuildStats, ZephyrPluginOptions } from 'zephyr-edge-contract';
import { ZeResolvedDependency } from './resolve_remote_dependency';
import { ZePackageJson } from '../lib/build-context/ze-package-json.type';
import { ZeGitInfo } from '../lib/build-context/ze-util-get-git-info';
import { ZeLogger } from '../lib/logging/ze-log-event';
import { ZeApplicationConfig } from '../lib/node-persist/upload-provider-options';
export interface ZeApplicationProperties {
    org: string;
    project: string;
    name: string;
    version: string;
}
export interface ZeDependencyPair {
    name: string;
    version: string;
}
export interface BuildProperties {
    output: string;
}
export declare function is_zephyr_dependency_pair(dep: ZeDependencyPair | null): dep is ZeDependencyPair;
export declare function is_zephyr_resolved_dependency(dep: ZeResolvedDependency | null): dep is ZeResolvedDependency;
/**
 * IMPORTANT: do NOT add methods to this class, keep it lean! IMPORTANT: use `await
 * ZephyrEngine.create(context)` to create an instance ZephyrEngine instance represents
 * current state of a build if there are methods - they should call pure functions from
 * ./internal
 */
export declare class ZephyrEngine {
    context: string;
    npmProperties: ZePackageJson;
    gitProperties: ZeGitInfo;
    application_uid: string;
    application_configuration: Promise<ZeApplicationConfig>;
    applicationProperties: ZeApplicationProperties;
    logger: Promise<ZeLogger>;
    env: {
        isCI: boolean;
        buildEnv: string;
    };
    buildProperties: BuildProperties;
    federated_dependencies: ZeResolvedDependency[] | null;
    build_start_time: number | null;
    build_id: Promise<string> | null;
    snapshotId: Promise<string> | null;
    hash_list: Promise<{
        hash_set: Set<string>;
    }> | null;
    version_url: string | null;
    /** This is intentionally PRIVATE use `await ZephyrEngine.create(context)` */
    private constructor();
    static defer_create(): {
        zephyr_engine_defer: Promise<ZephyrEngine>;
        zephyr_defer_create: (context: string | undefined) => void;
    };
    static create(context: string | undefined): Promise<ZephyrEngine>;
    resolve_remote_dependencies(deps: ZeDependencyPair[]): Promise<ZeResolvedDependency[] | null>;
    start_new_build(): Promise<void>;
    build_finished(): Promise<void>;
    upload_assets(props: {
        assetsMap: ZeBuildAssetsMap;
        buildStats: ZephyrBuildStats;
        mfConfig?: Pick<ZephyrPluginOptions, 'mfConfig'>['mfConfig'];
    }): Promise<void>;
}
export interface UploadOptions {
    snapshot: Snapshot;
    assets: {
        assetsMap: ZeBuildAssetsMap;
        missingAssets: ZeBuildAsset[];
    };
    getDashData: (zephyr_engine?: ZephyrEngine) => ZephyrBuildStats;
}
