import util from 'util';

var DEFAULT_ASSET_PREFIX = '/';

// lib-polyfill.js: include core-js，@babel/runtime，@swc/helpers，tslib.
// lib-react.js: include react，react-dom.
// lib-router.js: include react-router，react-router-dom，history，@remix-run/router.
// lib-lodash.js: include lodash，lodash-es.
// lib-antd.js: include antd.
// lib-arco.js: include @arco-design/web-react.
// lib-semi.js: include @douyinfe/semi-ui.
// lib-axios.js: include axios.
var SPLIT_CHUNK_MAP = {
    REACT: 'react',
    ROUTER: 'router',
    LODASH: 'lib-lodash',
    ANTD: 'lib-antd',
    ARCO: 'lib-arco',
    SEMI: 'lib-semi',
    AXIOS: 'lib-axios'
};
var SHARED_SPLIT_CHUNK_MAP = {
    react: SPLIT_CHUNK_MAP.REACT,
    'react-dom': SPLIT_CHUNK_MAP.REACT,
    'react-router': SPLIT_CHUNK_MAP.ROUTER,
    'react-router-dom': SPLIT_CHUNK_MAP.ROUTER,
    '@remix-run/router': SPLIT_CHUNK_MAP.ROUTER,
    lodash: SPLIT_CHUNK_MAP.LODASH,
    'lodash-es': SPLIT_CHUNK_MAP.LODASH,
    antd: SPLIT_CHUNK_MAP.ANTD,
    '@arco-design/web-react': SPLIT_CHUNK_MAP.ARCO,
    '@douyinfe/semi-ui': SPLIT_CHUNK_MAP.SEMI,
    axios: SPLIT_CHUNK_MAP.AXIOS
};
function autoDeleteSplitChunkCacheGroups(mfConfig, bundlerConfig) {
    var _bundlerConfig_optimization;
    if (!mfConfig.shared) {
        return;
    }
    if (!((_bundlerConfig_optimization = bundlerConfig.optimization) === null || _bundlerConfig_optimization === void 0 ? void 0 : _bundlerConfig_optimization.splitChunks) || !bundlerConfig.optimization.splitChunks.cacheGroups) {
        return;
    }
    var arrayShared = Array.isArray(mfConfig.shared) ? mfConfig.shared : Object.keys(mfConfig.shared);
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = arrayShared[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var shared = _step.value;
            var splitChunkKey = SHARED_SPLIT_CHUNK_MAP[shared];
            if (!splitChunkKey) {
                continue;
            }
            if (bundlerConfig.optimization.splitChunks.cacheGroups[splitChunkKey]) {
                delete bundlerConfig.optimization.splitChunks.cacheGroups[splitChunkKey];
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}

function isRegExp(target) {
    return util.types.isRegExp(target);
}

export { DEFAULT_ASSET_PREFIX, autoDeleteSplitChunkCacheGroups, isRegExp };
