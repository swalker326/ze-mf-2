'use strict';

var enhanced = require('@module-federation/enhanced');
var rspack = require('@module-federation/enhanced/rspack');
var sdk = require('@module-federation/sdk');
var utils = require('./utils.cjs.js');
require('util');

var name = "@module-federation/rsbuild-plugin";
var version = "0.8.7";
var description = "Module Federation plugin for Rsbuild";
var homepage = "https://module-federation.io";
var bugs = {
    url: "https://github.com/module-federation/core/issues"
};
var repository = {
    type: "git",
    url: "https://github.com/module-federation/core",
    directory: "packages/rsbuild-plugin"
};
var license = "MIT";
var exports$1 = {
    ".": {
        types: "./dist/index.cjs.d.ts",
        "import": "./dist/index.esm.js",
        require: "./dist/index.cjs.js"
    },
    "./utils": {
        types: "./dist/utils.cjs.d.ts",
        "import": "./dist/utils.esm.js",
        require: "./dist/utils.cjs.js"
    }
};
var main = "./dist/index.cjs.js";
var module$1 = "./dist/index.esm.js";
var typesVersions = {
    "*": {
        ".": [
            "./dist/index.cjs.d.ts"
        ],
        utils: [
            "./dist/utils.cjs.d.ts"
        ]
    }
};
var files = [
    "dist"
];
var dependencies = {
    "@module-federation/sdk": "workspace:*"
};
var devDependencies = {
    "@rsbuild/core": "^1.0.19"
};
var peerDependencies = {
    "@module-federation/enhanced": "workspace:*",
    "@rsbuild/core": "1.x"
};
var peerDependenciesMeta = {
    "@rsbuild/core": {
        optional: true
    },
    "@module-federation/enhanced": {
        optional: true
    }
};
var engines = {
    node: ">=16.0.0"
};
var publishConfig = {
    access: "public",
    provenance: true,
    registry: "https://registry.npmjs.org/"
};
var pkgJson = {
    name: name,
    version: version,
    description: description,
    homepage: homepage,
    bugs: bugs,
    repository: repository,
    license: license,
    exports: exports$1,
    main: main,
    module: module$1,
    typesVersions: typesVersions,
    files: files,
    dependencies: dependencies,
    devDependencies: devDependencies,
    peerDependencies: peerDependencies,
    peerDependenciesMeta: peerDependenciesMeta,
    engines: engines,
    publishConfig: publishConfig
};

var logger = sdk.createLogger('[ Module Federation Rsbuild Plugin ]');

function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var RSBUILD_PLUGIN_MODULE_FEDERATION_NAME = 'rsbuild:module-federation-enhanced';
var RSPACK_PLUGIN_MODULE_FEDERATION_NAME = 'module-federation';
var LIB_FORMAT = [
    'commonjs',
    'umd',
    'modern-module'
];
function isMFFormat(bundlerConfig) {
    var _bundlerConfig_output;
    var library = (_bundlerConfig_output = bundlerConfig.output) === null || _bundlerConfig_output === void 0 ? void 0 : _bundlerConfig_output.library;
    return !((typeof library === "undefined" ? "undefined" : _type_of(library)) === 'object' && !Array.isArray(library) && 'type' in library && LIB_FORMAT.includes(library.type));
}
var pluginModuleFederation = function(moduleFederationOptions) {
    return {
        name: RSBUILD_PLUGIN_MODULE_FEDERATION_NAME,
        setup: function(api) {
            var sharedOptions = enhanced.parseOptions(moduleFederationOptions.shared || [], function(item, key) {
                if (typeof item !== 'string') throw new Error('Unexpected array in shared');
                var config = item === key || !sdk.isRequiredVersion(item) ? {
                    import: item
                } : {
                    import: key,
                    requiredVersion: item
                };
                return config;
            }, function(item) {
                return item;
            });
            // shared[0] is the shared name
            var shared = sharedOptions.map(function(shared) {
                return shared[0].endsWith('/') ? shared[0].slice(0, -1) : shared[0];
            });
            api.onBeforeCreateCompiler(function(param) {
                var bundlerConfigs = param.bundlerConfigs;
                if (!bundlerConfigs) {
                    throw new Error('Can not get bundlerConfigs!');
                }
                bundlerConfigs.forEach(function(bundlerConfig) {
                    if (!isMFFormat(bundlerConfig)) {
                        return;
                    } else {
                        var _bundlerConfig_output, _bundlerConfig_output1;
                        // mf
                        utils.autoDeleteSplitChunkCacheGroups(moduleFederationOptions, bundlerConfig);
                        var externals = bundlerConfig.externals;
                        if (Array.isArray(externals)) {
                            var sharedModules = new Set();
                            bundlerConfig.externals = externals.filter(function(ext) {
                                var sharedModule;
                                if (utils.isRegExp(ext)) {
                                    var match = shared.some(function(dep) {
                                        if (ext.test(dep) || ext.test(pkgJson.name)) {
                                            sharedModule = dep;
                                            return true;
                                        }
                                        return false;
                                    });
                                    match && sharedModule && sharedModules.add(sharedModule);
                                    return !match;
                                }
                                if (typeof ext === 'string') {
                                    if (ext === pkgJson.name) {
                                        return false;
                                    }
                                    var match1 = shared.some(function(dep) {
                                        if (dep === ext) {
                                            sharedModule = dep;
                                        }
                                        return dep === ext;
                                    });
                                    if (match1) {
                                        sharedModule && sharedModules.add(sharedModule);
                                        return false;
                                    }
                                    return true;
                                }
                                return true;
                            });
                            if (sharedModules.size > 0) {
                                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                try {
                                    for(var _iterator = sharedModules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                        var sharedModule = _step.value;
                                        logger.log("".concat(sharedModule, " is removed from externals because it is a shared module."));
                                    }
                                } catch (err) {
                                    _didIteratorError = true;
                                    _iteratorError = err;
                                } finally{
                                    try {
                                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                                            _iterator.return();
                                        }
                                    } finally{
                                        if (_didIteratorError) {
                                            throw _iteratorError;
                                        }
                                    }
                                }
                            }
                        }
                        if (!((_bundlerConfig_output = bundlerConfig.output) === null || _bundlerConfig_output === void 0 ? void 0 : _bundlerConfig_output.chunkLoadingGlobal)) {
                            bundlerConfig.output.chunkLoading = 'jsonp';
                        }
                        // `uniqueName` is required for react refresh to work
                        if (!((_bundlerConfig_output1 = bundlerConfig.output) === null || _bundlerConfig_output1 === void 0 ? void 0 : _bundlerConfig_output1.uniqueName)) {
                            bundlerConfig.output.uniqueName = moduleFederationOptions.name;
                        }
                        if (!bundlerConfig.plugins.find(function(p) {
                            return p && p.name === rspack.PLUGIN_NAME;
                        })) {
                            bundlerConfig.plugins.push(new rspack.ModuleFederationPlugin(moduleFederationOptions));
                        }
                    }
                });
            });
            // dev config only works on format: 'mf'
            api.modifyRsbuildConfig(function(config) {
                // Change some default configs for remote modules
                if (moduleFederationOptions.exposes) {
                    var _config_server, _config_dev_client, _originalConfig_dev, _config_server1;
                    var _config;
                    (_config = config).dev || (_config.dev = {});
                    // For remote modules, Rsbuild should send the ws request to the provider's dev server.
                    // This allows the provider to do HMR when the provider module is loaded in the consumer's page.
                    if (((_config_server = config.server) === null || _config_server === void 0 ? void 0 : _config_server.port) && !((_config_dev_client = config.dev.client) === null || _config_dev_client === void 0 ? void 0 : _config_dev_client.port)) {
                        var _config_dev;
                        (_config_dev = config.dev).client || (_config_dev.client = {});
                        config.dev.client.port = config.server.port;
                    }
                    // Change the default assetPrefix to `true` for remote modules.
                    // This ensures that the remote module's assets can be requested by consumer apps with the correct URL.
                    var originalConfig = api.getRsbuildConfig('original');
                    if (((_originalConfig_dev = originalConfig.dev) === null || _originalConfig_dev === void 0 ? void 0 : _originalConfig_dev.assetPrefix) === undefined && config.dev.assetPrefix === ((_config_server1 = config.server) === null || _config_server1 === void 0 ? void 0 : _config_server1.base)) {
                        config.dev.assetPrefix = true;
                    }
                }
            });
            api.modifyEnvironmentConfig(function(config) {
                // Module Federation runtime uses ES6+ syntax,
                // adding to include and let SWC transform it
                config.source.include = _to_consumable_array(config.source.include || []).concat([
                    /@module-federation[\\/]sdk/,
                    /@module-federation[\\/]runtime/
                ]);
                return config;
            });
        }
    };
};

Object.defineProperty(exports, "PLUGIN_NAME", {
  enumerable: true,
  get: function () { return rspack.PLUGIN_NAME; }
});
exports.RSBUILD_PLUGIN_MODULE_FEDERATION_NAME = RSBUILD_PLUGIN_MODULE_FEDERATION_NAME;
exports.RSPACK_PLUGIN_MODULE_FEDERATION_NAME = RSPACK_PLUGIN_MODULE_FEDERATION_NAME;
exports.isMFFormat = isMFFormat;
exports.pluginModuleFederation = pluginModuleFederation;
