let transformRawLoader_rslib_entry_ = async function transformLoader_transform(source, map) {
    var _this__compiler___rsbuildTransformer, _this__compiler;
    let callback = this.async(), bypass = ()=>callback(null, source, map), { id: transformId, getEnvironment } = this.getOptions();
    if (!transformId) return bypass();
    let transform = null === (_this__compiler = this._compiler) || void 0 === _this__compiler ? void 0 : null === (_this__compiler___rsbuildTransformer = _this__compiler.__rsbuildTransformer) || void 0 === _this__compiler___rsbuildTransformer ? void 0 : _this__compiler___rsbuildTransformer[transformId];
    if (!transform) return bypass();
    let result = await transform({
        code: source,
        resource: this.resource,
        resourcePath: this.resourcePath,
        resourceQuery: this.resourceQuery,
        environment: getEnvironment(),
        addDependency: this.addDependency.bind(this),
        emitFile: this.emitFile.bind(this),
        importModule: this.importModule.bind(this)
    });
    if (null == result) return bypass();
    if ('string' == typeof result) return callback(null, result, map);
    let useMap = null != map, finalMap = result.map ?? map;
    callback(null, result.code, useMap ? finalMap : void 0);
}, raw = !0;
export { transformRawLoader_rslib_entry_ as default, raw };
