"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToGraph = void 0;
const module_part_one_1 = require("./module-part-one");
const convert_dependencies_1 = require("./convert-dependencies");
const module_part_two_1 = require("./module-part-two");
const process_function_remotes_1 = require("./process-function-remotes");
function convertToGraph(params
// standalone?: boolean
) {
    const { name, 
    // federationRemoteEntry,
    modules, topLevelPackage, metadata, versionData, environment, version, posted, group, functionRemotes, sha, buildHash, } = params;
    // validateParams(
    //   { federationRemoteEntry, modules, topLevelPackage /*, metadata*/ },
    //   standalone
    // );
    const { consumes, modulesObj, npmModules } = (0, module_part_one_1.modulePartOne)(modules);
    const convertedDeps = (0, convert_dependencies_1.convertDependencies)({
        package: topLevelPackage,
        npmModules,
    });
    const { overrides } = (0, module_part_two_1.modulePartTwo)({
        name,
        modules,
        modulesObj,
        convertedDeps,
    });
    (0, process_function_remotes_1.processFunctionRemotes)({ functionRemotes, consumes });
    const sourceUrl = metadata?.source?.url ?? '';
    const remote = metadata?.remote ?? '';
    return {
        ...convertedDeps,
        id: name,
        name,
        remote,
        metadata,
        versionData,
        overrides: Object.values(overrides),
        consumes: consumes.map((con) => ({
            ...con,
            usedIn: Array.from(con.usedIn.values()).map((file) => ({
                file,
                url: `${sourceUrl}/${file}`,
            })),
        })),
        modules: Object.values(modulesObj).map((mod) => ({
            ...mod,
            requires: Array.from(mod.requires.values()).filter((value) => typeof value === 'string'),
        })),
        environment,
        version,
        posted,
        group,
        sha,
        buildHash,
    };
}
exports.convertToGraph = convertToGraph;
//# sourceMappingURL=convert-to-graph.js.map