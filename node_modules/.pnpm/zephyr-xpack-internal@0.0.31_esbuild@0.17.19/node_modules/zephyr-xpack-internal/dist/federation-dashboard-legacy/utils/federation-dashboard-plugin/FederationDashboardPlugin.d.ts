import { ConvertedGraph, ZeUploadBuildStats } from 'zephyr-edge-contract';
import { TopLevelPackage } from '../convert-to-graph/validate-params';
import { FederationDashboardPluginOptions } from './federation-dashboard-plugin-options';
import { Exposes } from './federation-dashboard-types';
import { XChunk, XCompiler, XStats, XStatsChunk, XStatsCompilation } from '../../../xpack.types';
interface ProcessWebpackGraphParams {
    stats: XStats;
    stats_json: XStatsCompilation;
}
export declare class FederationDashboardPlugin {
    _options: FederationDashboardPluginOptions;
    _dashData: string | undefined;
    allArgumentsUsed: [file: string, applicationID: string, name: string][];
    FederationPluginOptions: {
        name?: string;
        remotes?: unknown;
        exposes?: Exposes;
    };
    constructor(options: Partial<FederationDashboardPluginOptions>);
    /** @param {Compiler} compiler */
    apply(compiler: XCompiler): void;
    processWebpackGraph({ stats, stats_json, }: ProcessWebpackGraphParams): ConvertedGraph | undefined;
    getRemoteEntryChunk(stats: XStatsCompilation, FederationPluginOptions: typeof this.FederationPluginOptions): XStatsChunk | undefined;
    getChunkDependencies(validChunkArray: XChunk[]): Record<string, never>;
    buildVendorFederationMap(liveStats: XStats): TopLevelPackage;
    mapToObjectRec(m: Record<string, XChunk[keyof XChunk]> | Map<string, XChunk[keyof XChunk]> | XChunk[keyof XChunk][]): Record<string, unknown>;
    buildValidChunkArray(liveStats: XStats, FederationPluginOptions: typeof this.FederationPluginOptions): XChunk[];
    postDashboardData(dashData: any): Promise<{
        value: ZeUploadBuildStats;
    } | undefined>;
}
export {};
