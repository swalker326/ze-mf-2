"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSuccessTuple = exports.PromiseTuple = exports.PromiseLazyLoad = exports.deferred = exports.PromiseWithResolvers = void 0;
/**
 * ES 2023 Promise.withResolvers() polyfill
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/withResolvers
 */
function PromiseWithResolvers() {
    let resolve;
    let reject;
    const promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
    });
    return { promise, resolve, reject };
}
exports.PromiseWithResolvers = PromiseWithResolvers;
/**
 * Creates a deferred promise.
 *
 * @returns A tuple containing the promise, resolve and reject functions in array
 */
function deferred() {
    let resolve;
    let reject;
    const promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
    });
    return [promise, resolve, reject];
}
exports.deferred = deferred;
/**
 * Lazy loads a promise.
 *
 * @link https://github.com/sindresorhus/p-lazy
 */
function PromiseLazyLoad(promise) {
    let _data;
    return (params) => {
        if (!_data) {
            _data = promise(params);
        }
        return _data;
    };
}
exports.PromiseLazyLoad = PromiseLazyLoad;
/** Creates a `[error, value]` tuple value from a promise. */
async function PromiseTuple(maybePromise) {
    try {
        return [null, await maybePromise];
    }
    catch (err) {
        return [err, undefined];
    }
}
exports.PromiseTuple = PromiseTuple;
function isSuccessTuple(tuple) {
    return tuple[0] === null;
}
exports.isSuccessTuple = isSuccessTuple;
//# sourceMappingURL=index.js.map